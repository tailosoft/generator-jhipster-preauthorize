package <%= packageName %>.web.rest;

import <%= packageName %>.repository.RoleRepository;
import <%= packageName %>.security.AuthoritiesConstants;
import <%= packageName %>.service.RoleService;
import <%= packageName %>.service.dto.RoleDTO;
import <%= packageName %>.web.rest.errors.BadRequestAlertException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import tech.jhipster.web.util.HeaderUtil;
import tech.jhipster.web.util.ResponseUtil;

/**
 * REST controller for managing {@link <%= packageName %>.domain.Role}.
 */
@RestController
@RequestMapping("/api/admin")
public class RoleResource {

    private final Logger log = LoggerFactory.getLogger(RoleResource.class);

    private static final String ENTITY_NAME = "role";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final RoleService roleService;

    private final RoleRepository roleRepository;

    public RoleResource(RoleService roleService, RoleRepository roleRepository) {
        this.roleService = roleService;
        this.roleRepository = roleRepository;
    }

    /**
     * {@code POST  /admin/roles} : Create a new role.
     *
     * @param roleDTO the role to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new role, or with status {@code 400 (Bad Request)} if the role has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/roles")
    @PreAuthorize("hasAuthority('" + AuthoritiesConstants.ADMIN + "')")
    public ResponseEntity<RoleDTO> createRole(@Valid @RequestBody RoleDTO roleDTO) throws URISyntaxException {
        log.debug("REST request to save Role : {}", roleDTO);
        if (roleRepository.existsById(roleDTO.getName())) {
            throw new BadRequestAlertException("This role already exists", ENTITY_NAME, "idduplicate");
        }
        RoleDTO result = roleService.save(roleDTO);
        return ResponseEntity
            .created(new URI("/api/admin/roles/" + result.getName()))
            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getName()))
            .body(result);
    }

    /**
     * {@code PUT /admin/roles/{nsame}} : Updates an existing Role.
     *
     * @param roleDTO the role to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated role.
     */
    @PutMapping("/roles/{name}")
    @PreAuthorize("hasAuthority(\"" + AuthoritiesConstants.ADMIN + "\")")
    public ResponseEntity<RoleDTO> updateRole(
        @PathVariable(value = "name", required = false) final String name,
        @Valid @RequestBody RoleDTO roleDTO
    ) {
        log.debug("REST request to update Role : {}", roleDTO);
        if (roleDTO.getName() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(name, roleDTO.getName())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }
        if (!roleRepository.existsById(name)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }
        RoleDTO result = roleService.update(roleDTO);

        return ResponseEntity
            .ok()
            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, roleDTO.getName()))
            .body(result);
    }

    /**
     * {@code GET /admin/roles} : get all the roles.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of roles in body.
     */
    @GetMapping("/roles")
    @PreAuthorize("hasAuthority('" + AuthoritiesConstants.ADMIN + "')")
    public List<RoleDTO> getAllRoles() {
        log.debug("REST request to get all Roles");
        return roleService.findAll();
    }

    /**
     * {@code GET /admin/roles/:name} : get the "name" role.
     *
     * @param name the name of the role to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the role, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/roles/{name}")
    @PreAuthorize("hasAuthority('" + AuthoritiesConstants.ADMIN + "')")
    public ResponseEntity<RoleDTO> getRole(@PathVariable String name) {
        log.debug("REST request to get Role : {}", name);
        Optional<RoleDTO> role = roleService.findOne(name);
        return ResponseUtil.wrapOrNotFound(role);
    }

    /**
     * {@code DELETE /admin/roles/:name} : delete the "name" role.
     *
     * @param name the name of the role to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/roles/{name}")
    @PreAuthorize("hasAuthority('" + AuthoritiesConstants.ADMIN + "')")
    public ResponseEntity<Void> deleteRole(@PathVariable String name) {
        log.debug("REST request to delete Role : {}", name);
        roleService.delete(name);
        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, name)).build();
    }

    /**
     * {@code GET /admin/permission-tree} : get tree with all permissions
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body all permission tree.
     */
    @GetMapping("/permission-tree")
    @PreAuthorize("hasAuthority(\"" + AuthoritiesConstants.ADMIN + "\")")
    public Map<String, List<String>> getPermissionTree() {
        log.debug("REST request to get permission tree");
        // since only admin can see this for now, we show all, later we might show only permissions other users can see
        return AuthoritiesConstants.PERMISSION_TREE;
    }
}
