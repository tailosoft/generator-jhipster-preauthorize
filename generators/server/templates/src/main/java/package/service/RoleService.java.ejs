package <%= packageName %>.service;

import <%= packageName %>.security.AuthoritiesConstants;
import <%= packageName %>.domain.Role;
import <%= packageName %>.repository.RoleRepository;
import <%= packageName %>.service.dto.RoleDTO;
import <%= packageName %>.service.mapper.RoleMapper;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service class for managing {@link Role}.
 */
@Service
@Transactional
public class RoleService {

    private final Logger log = LoggerFactory.getLogger(RoleService.class);

    private final RoleRepository roleRepository;

    private final RoleMapper roleMapper;

    public RoleService(RoleRepository roleRepository, RoleMapper roleMapper) {
        this.roleRepository = roleRepository;
        this.roleMapper = roleMapper;
    }

    /**
     * Save a role.
     *
     * @param roleDTO the entity to save.
     * @return the persisted entity.
     */
    public RoleDTO save(RoleDTO roleDTO) {
        log.debug("Request to save Role : {}", roleDTO);
        Role role = roleMapper.toEntity(roleDTO);
        role = roleRepository.save(role);
        return roleMapper.toDto(role);
    }

    /**
     * @param roleDTO
     * @return the roleDTO with updated permissions
     */
    public RoleDTO update(RoleDTO roleDTO) {
        log.debug("Request to update Role : {}", roleDTO);
        if (roleDTO.getName().equals(AuthoritiesConstants.ADMIN)) {
            throw new IllegalArgumentException("can't update ROLE_ADMIN");
        }
        Role role = roleMapper.toEntity(roleDTO);
        role = roleRepository.save(role);
        return roleMapper.toDto(role);
    }

    /**
     * Get one role by name.
     *
     * @param name the name of the entity.
     * @return the entity.
     */
    @Transactional(readOnly = true)
    public Optional<RoleDTO> findOne(String name) {
        log.debug("Request to get Role : {}", name);
        return roleRepository.findById(name).map(roleMapper::toDto);
    }

    /**
     * Delete the role by name.
     *
     * @param name the name of the entity.
     */
    public void delete(String name) {
        log.debug("Request to delete Role : {}", name);
        if (name.equals(AuthoritiesConstants.ADMIN)) {
            throw new IllegalArgumentException("can't delete ROLE_ADMIN");
        }
        roleRepository.deleteUserRolesByRoleName(name);
        // normally one would want to clear the user cache in order of delete roles not to be included, but that is not a big deal as delete roles do not add extra permissions
        roleRepository.deleteById(name);
    }

    /**
     * Gets a list of all the roles.
     *
     * @return a list of all the roles.
     */
    @Transactional(readOnly = true)
    public List<RoleDTO> findAll() {
        return roleRepository.findAll().stream().map(roleMapper::toDto).collect(Collectors.toList());
    }
}
